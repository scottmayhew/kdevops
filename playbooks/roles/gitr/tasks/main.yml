---
- name: Import optional extra_args file
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  failed_when: false
  tags: vars

- name: Set up the /data mount point
  tags: ['data_partition']
  ansible.builtin.include_role:
    name: create_data_partition

- name: Set the name of the test group
  tags: vars
  ansible.builtin.set_fact:
    gitr_test_group: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') }}"

- name: Set the pathname of the local results directory
  tags: vars
  ansible.builtin.set_fact:
    gitr_results_full_path: "{{ topdir_path }}/workflows/gitr/results"
    gitr_results_target: "../workflows/gitr/results/last-run"
    gitr_run_uniqifier: "{{ ansible_date_time.iso8601_basic_short }}"

- name: Clean up our localhost results/last-run directory
  local_action: file path="{{ gitr_results_target }}/" state=absent
  run_once: true
  tags: [ 'run_tests', 'copy_results', 'clean_local_results' ]

- name: Create empty last-run directory
  local_action: file path="{{ gitr_results_target }}/" state=directory
  run_once: true
  tags: [ 'run_tests', 'copy_results', 'clean_local_results' ]

- name: Get used target kernel version
  tags: [ 'copy_results' ]
  command: "uname -r"
  register: uname_cmd

- name: Store last kernel variable
  tags: [ 'copy_results' ]
  set_fact:
    last_kernel: "{{ uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\",'') }}"
  run_once: true

- name: Document used target kernel version
  local_action: "shell echo {{ last_kernel }} > {{ gitr_results_target }}/../last-kernel.txt"
  tags: [ 'run_tests', 'copy_results', 'print_results' ]
  run_once: true

- name: Ensure the local results directory exists
  tags: copy_results
  ansible.builtin.file:
    path: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost

- name: Install dependencies for the git regression tests
  tags: gitr
  ansible.builtin.include_tasks:
    file: install-deps/main.yml

- name: Set up an iSCSI initiator on the target node
  tags: gitr
  ansible.builtin.include_role:
    name: iscsi
    tasks_from: add_initiator
  when:
    - gitr_test_group == "nfs-pnfs"

- name: Remove the old test file system
  tags: gitr
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.posix.mount:
    path: "{{ gitr_mnt }}"
    state: unmounted

- name: Create the file system under test
  tags: gitr
  ansible.builtin.include_role:
    name: create_partition
  vars: # noqa: var-naming[no-role-prefix]
    disk_setup_device: "{{ gitr_device }}"
    disk_setup_fstype: "{{ gitr_fstype }}"
    disk_setup_label: "{{ gitr_label }}"
    disk_setup_fs_opts: "-L {{ gitr_label }}"
    disk_setup_path: "{{ gitr_mnt }}"
    disk_setup_mount_opts: "{{ gitr_mount_opts }}"
  when:
    - not gitr_uses_no_devices|bool

- name: Create the tmpfs file system under test
  tags: gitr
  ansible.builtin.include_role:
    name: create_tmpfs
  vars: # noqa: var-naming[no-role-prefix]
    tmpfs_mount_options: "{{ gitr_mount_opts }}"
    tmpfs_mounted_on: "{{ gitr_mnt }}"
  when:
    - gitr_fstype == "tmpfs"

- name: Set the NFS export's pathname
  tags: gitr
  ansible.builtin.set_fact:
    gitr_nfs_server_export: "{{ gitr_test_group }}-gitr"
  when:
    - gitr_nfs_use_kdevops_nfsd|bool
    - gitr_fstype == "nfs"

- name: Set the NFS export's fstype
  tags: gitr
  ansible.builtin.set_fact:
    gitr_nfs_export_fstype: "{{ nfsd_export_fstype }}"
  when:
    - gitr_fstype == "nfs"
    - gitr_test_group != 'nfs-pnfs'

- name: Set the NFS export's fstype
  tags: gitr
  ansible.builtin.set_fact:
    gitr_nfs_export_fstype: "xfs"
  when:
    - gitr_test_group == 'nfs-pnfs'

- name: Create an NFSD export for testing
  ansible.builtin.include_role:
    name: nfsd_add_export
  vars: # noqa: var-naming[no-role-prefix]
    server_host: "{{ gitr_nfs_server_host }}"
    export_volname: "{{ gitr_nfs_server_export }}"
    export_options: "{{ nfsd_export_options }}"
    export_fstype: "{{ gitr_nfs_export_fstype }}"
    export_size: 10g
    export_pnfs: "{{ (gitr_test_group == 'nfs-pnfs') | bool }}"
  when:
    - gitr_nfs_use_kdevops_nfsd|bool
    - gitr_fstype == "nfs"

- name: Form the list of NFS mount options to use
  tags: gitr
  ansible.builtin.set_fact:
    gitr_nfs_vers: "{{ gitr_nfs_vers_dict[gitr_test_group] }}"
    gitr_nfs_mount_opts: "{{ gitr_mount_opts | ansible.builtin.split(',') }}"
  when:
    - kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Create the NFS mount under test, if needed
  tags: gitr
  ansible.builtin.include_role:
    name: create_nfs_mount
  vars:  # noqa: var-naming[no-role-prefix]
    nfs_mounted_on: "{{ gitr_mnt }}"
    nfs_server_hostname: "{{ gitr_nfs_server_host }}"
    nfs_server_export: "{{ nfsd_export_path }}/{{ gitr_nfs_server_export }}"
    nfs_mount_options: "{{ (gitr_nfs_vers + gitr_nfs_mount_opts) | join(',') }}"
  when:
    - kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Create the NFS mount under test, if needed
  tags: gitr
  ansible.builtin.include_role:
    name: create_nfs_mount
  vars:  # noqa: var-naming[no-role-prefix]
    nfs_mounted_on: "{{ gitr_mnt }}"
    nfs_server_hostname: "{{ gitr_nfs_server_host }}"
    nfs_server_export: "{{ nfsd_export_path }}/{{ gitr_nfs_server_export }}"
    nfs_mount_options: "{{ gitr_mount_opts }}"
  when:
    - not kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Remove existing git build directory
  tags: gitr
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "{{ gitr_mnt }}/git"
    state: absent

- name: Shallow-clone the git source code from {{ gitr_repo }}
  tags: gitr
  ansible.builtin.git:
    repo: "{{ gitr_repo }}"
    dest: "{{ gitr_mnt }}/git"
    update: true
    version: "{{ gitr_repo_commit }}"
    depth: 1
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - kdevops_workflows_dedicated_workflow|bool

- name: Clone the full git source code tree from {{ gitr_repo }}
  tags: gitr
  ansible.builtin.git:
    repo: "{{ gitr_repo }}"
    dest: "{{ gitr_mnt }}/git"
    update: true
    version: "{{ gitr_repo_commit }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - not kdevops_workflows_dedicated_workflow|bool

- name: Build git on the target nodes
  tags: ['gitr', 'build']
  community.general.make:
    chdir: "{{ gitr_mnt }}/git"
    jobs: "{{ ansible_processor_nproc }}"

- name: Set the test thread count (single)
  tags: run_tests
  ansible.builtin.set_fact:
    gitr_test_thread_count: "1"
  when:
    - gitr_thread_single|bool

- name: Set the test thread count (fast)
  tags: run_tests
  ansible.builtin.set_fact:
    gitr_test_thread_count: "{{ ansible_processor_nproc }}"
  when:
    - gitr_thread_fast|bool

- name: Set the test thread count (stress)
  tags: run_tests
  ansible.builtin.set_fact:
    gitr_test_thread_count: "{{ ansible_processor_nproc * 2 }}"
  when:
    - gitr_thread_stress|bool

- name: Set the test thread count (custom)
  tags: run_tests
  ansible.builtin.set_fact:
    gitr_test_thread_count: "{{ gitr_thread_count }}"
  when:
    - gitr_thread_custom|bool

- name: Run the full git regression suite
  tags: run_tests
  environment:
    GIT_TEST_CLONE_2GB: "true"
  ansible.builtin.shell:
    cmd: "prove -Q -a /tmp/{{ gitr_run_uniqifier }}.tgz --jobs {{ gitr_test_thread_count }} ./t[0-9]*.sh"
    chdir: "{{ gitr_mnt }}/git/t"
  register: gitr_results
  failed_when: false
  changed_when: false

- name: Run specific git regression tests
  tags: run_specific_tests
  ansible.builtin.command:
    cmd: "prove -Q -a /tmp/{{ gitr_run_uniqifier }}.tgz {{ gitr_test_list }}"
    chdir: "{{ gitr_mnt }}/git/t"
  register: gitr_results
  failed_when: false
  changed_when: false

- name: Capture RPC statistics
  tags: copy_results
  ansible.builtin.command: "mountstats --rpc"
  register: rpc_results
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'
  changed_when: false

- name: Capture RPC transport statistics
  tags: copy_results
  ansible.builtin.command: "mountstats --xprt"
  register: xprt_results
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'
  changed_when: false

- name: Save test summary output to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ gitr_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.summary"
    mode: "u=rw,g=r,o=r"

- name: Save standard error to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ gitr_results.stderr_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.stderr"
    mode: "u=rw,g=r,o=r"
  when: gitr_results.rc != 0

- name: Save RPC statistics to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ rpc_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.rpc"
    mode: "u=rw,g=r,o=r"
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Save RPC transport statistics to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ xprt_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.xprt"
    mode: "u=rw,g=r,o=r"
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Copy the TAP archive to the control node
  tags: copy_results
  ansible.builtin.fetch:
    src: "/tmp/{{ gitr_run_uniqifier }}.tgz"
    dest: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: true

- name: Copy summary results to the control node
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.summary"
    dest: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false

- name: Copy stderr to the control node
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.stderr"
    dest: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when: gitr_results.rc != 0

- name: Copy RPC statistics to the control node
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.rpc"
    dest: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Copy RPC transport statistics to the control node
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/{{ gitr_run_uniqifier }}.xprt"
    dest: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Verify last-run kernel directory exists
  tags: [ 'copy_results' ]
  delegate_to: localhost
  stat:
    path: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}"
  register: last_run_kernel_dir

- name: Copy over the last-run into the results directory for archiving into kdevops
  copy:
    src: "{{ gitr_results_full_path }}/last-run/{{ last_kernel }}"
    dest: "{{ gitr_results_full_path }}/"
  run_once: true
  tags: [ 'copy_results' ]
  delegate_to: localhost
  when:
    - last_run_kernel_dir.stat.exists
